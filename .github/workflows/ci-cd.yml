name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run linting
        run: npm run lint

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/truvoice:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="environment=dev" -out=tfplan
          
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
      - name: Update Kubernetes manifests
        run: |
          # Update the image tag in the deployment.yaml
          sed -i "s|image: .*|image: ${{ steps.login-ecr.outputs.registry }}/truvoice:${{ github.sha }}|g" k8s/deployment.yaml
          
      - name: Deploy to Kubernetes
        run: |
          # Get the kubeconfig from the master node
          aws ssm get-parameter --name "/k3s/kubeconfig" --with-decryption --query Parameter.Value --output text > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          # Apply the updated manifests
          kubectl apply -f k8s/monitoring/namespace.yaml
          kubectl apply -f k8s/monitoring/prometheus-config.yaml
          kubectl apply -f k8s/monitoring/prometheus.yaml
          kubectl apply -f k8s/monitoring/grafana.yaml
          kubectl apply -f k8s/monitoring/grafana-ingress.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Wait for the deployment to be ready
          kubectl rollout status deployment/truvoice -n truvoice-dev --timeout=300s 